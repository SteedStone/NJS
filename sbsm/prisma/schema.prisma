// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bakery {
  id              String           @id @default(cuid())
  name            String           @unique
  address         String?
  latitude        Float?
  longitude       Float?
  password        String           // Individual bakery password
  createdAt       DateTime         @default(now())
  products        Product[]
  orders          Order[]
}

model Product {
  id         String         @id @default(cuid())
  name       String
  price      Float
  quantity   Int            // Stock for this specific bakery
  createdAt  DateTime       @default(now())
  orderItems OrderItem[]
  archived   Boolean        @default(false)
  image      String?
  description String?
  categories String[]
  types      String[]
  
  // Each product belongs to a specific bakery
  bakeryId   String?
  bakery     Bakery?        @relation(fields: [bakeryId], references: [id], onDelete: Cascade)
  
  @@index([bakeryId])
  @@index([name])
  @@index([bakeryId, name])
  @@index([bakeryId, archived])
}


model Order {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  items         OrderItem[]
  name          String
  email         String
  validated     Boolean     @default(false)
  phone         String?
  bakeryId      String?     // Reference to Bakery ID
  bakery        Bakery?     @relation(fields: [bakeryId], references: [id])
  bakeryName    String?     // Keep bakery name for backward compatibility
  pin           String?
  time          String?
  status        String?     @default("pending")
  paymentMethod String?     @default("stripe")  // "stripe" or "bakery"
  isPaid        Boolean     @default(false)     // Track if payment is completed
  
  @@index([bakeryId])
  @@index([createdAt])
  @@index([status])
  @@index([bakeryId, status])
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  
  @@index([orderId])
  @@index([productId])
}
